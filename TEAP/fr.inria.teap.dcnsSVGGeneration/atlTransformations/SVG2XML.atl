-- @atlcompiler atl2006

-- ******************************************************************************
-- Copyright (c) 2006-2013 INRIA. 
-- All rights reserved. This program and the accompanying materials 
-- are made available under the terms of the Eclipse Public License v1.0 
-- which accompanies this distribution, and is available at
-- http://www.eclipse.org/legal/epl-v10.html
-- 
-- Contributors: 
-- 	INRIA - Initial implementation
--  
-- ******************************************************************************

--@name SVG2XML
--@domains SVG, Pie chart
--@authors Eric Vepa (eric.vepa <at> gmail.com), Matthieu Allon (matthieu.allon <at> gmail.com)
--@description XML extractor for SVG pie charts.

module SVG2XML; -- Module Template
create OUT : XML from IN : SVG;

uses SVG2XMLHelpers;

---@sourcePattern SVG!Svg
---@targetPattern XML!Root
---@targetPattern XML!Attribute
rule Svg2Root {
	from
		svg:SVG!Svg
	to
		root:XML!Root (
			name <- 'svg',
			children <- thisModule.Attribute('xmlns', if svg.namespace -> notEmpty() then svg.namespace ->at(1) else 'http://www.w3.org/2000/svg' endif),
			children <- thisModule.Attribute('xmlns:xlink', if svg.namespace -> notEmpty() then svg.namespace ->at(2) else OclUndefined endif),
			children <- version,
			children <- thisModule.Attribute('width', if not svg.size.oclIsUndefined() then svg.size.width.toString() else '100%' endif),
			children <- thisModule.Attribute('height', if not svg.size.oclIsUndefined() then svg.size.height.toString() else '100%' endif),
			children <- svg.children
		),
		version:XML!Attribute (
			name <- 'version',
			value <- svg.version
		)
}	

---@sourcePattern SVG!G
---@targetPattern XML!Element
rule G2Element {
	from
		g:SVG!G
	using {
		transforms : Sequence(SVG!Transform) = g.attribute->select(a|a.oclIsKindOf(SVG!Transform));
		transformValue : String = transforms->iterate(transf; str:String=''|str +
			if transf.oclIsTypeOf(SVG!Scale)
				then transf.scale()
				else if transf.oclIsTypeOf(SVG!Translate)
					then transf.translate()
					else if transf.oclIsTypeOf(SVG!Rotate)
						then transf.rotate()
						else ''
					endif
				endif
			endif +
			if transf <> transforms->last()
				then ' '
				else ''
			endif);	
	}
	to
		elmt:XML!Element (
			name <- 'g',
			children <- thisModule.Attribute('transform', if transforms->notEmpty() then transformValue else '' endif),
			children <- thisModule.Attribute('fill', if not g.fill.oclIsUndefined() then g.fill else 'black' endif),
			children <- g.groupContent
		)
}	

---@sourcePattern SVG!Rect
---@targetPattern XML!Element
rule Rect2Element {
	from
		rect:SVG!Rect
	to
		elmt:XML!Element (
			name <- 'rect',
			children <- thisModule.Attribute('x', if not rect.position.oclIsUndefined() then rect.position.x.toString() else '0' endif),
			children <- thisModule.Attribute('y', if not rect.position.oclIsUndefined() then rect.position.y.toString() else '0' endif),
			children <- thisModule.Attribute('width', if not rect.size.oclIsUndefined() then rect.size.width.toString() else '100%' endif),
			children <- thisModule.Attribute('height', if not rect.size.oclIsUndefined() then rect.size.height.toString() else '100%' endif),
			children <- thisModule.Attribute('fill', if not rect.fill.oclIsUndefined() then rect.fill else 'black' endif),
			children <- thisModule.Attribute('stroke', if not rect.stroke.oclIsUndefined() then rect.stroke else 'none' endif)
		)
}	

---@sourcePattern SVG!Circle
---@targetPattern XML!Element
rule Circle2Element {
	from
		circ:SVG!Circle
	to
		elmt:XML!Element (
			name <- 'circle',
			children <- thisModule.Attribute('x', if not circ.position.oclIsUndefined() then circ.position.x.toString() else '0' endif),
			children <- thisModule.Attribute('y', if not circ.position.oclIsUndefined() then circ.position.y.toString() else '0' endif),
			children <- thisModule.Attribute('r', if not circ.size.oclIsUndefined() then circ.size.width.toString() else '100%' endif),
			children <- thisModule.Attribute('fill', if not circ.fill.oclIsUndefined() then circ.fill else 'black' endif),
			children <- thisModule.Attribute('stroke', if not circ.stroke.oclIsUndefined() then circ.stroke else 'none' endif)
		)
}	
---@sourcePattern SVG!Line
---@targetPattern XML!Element
rule Line2Element {
	from
		line:SVG!Line
	to
		elmt:XML!Element (
			name <- 'line',
			children <- thisModule.Attribute('x1', if line.between -> notEmpty() then line.between -> at(1).position.x.toString() else '10' endif),
			children <- thisModule.Attribute('y1', if line.between -> notEmpty() then line.between -> at(1).position.y.toString() else '10' endif),
			children <- thisModule.Attribute('x2', if line.between -> notEmpty() then line.between -> at(2).position.x.toString() else '10' endif),
			children <- thisModule.Attribute('y2', if line.between -> notEmpty() then line.between -> at(2).position.y.toString() else '20' endif),
			children <- thisModule.Attribute('stroke', if not line.stroke.oclIsUndefined() then line.stroke else 'black' endif)
		)
}	

---@sourcePattern SVG!Image
---@targetPattern XML!Element
rule Image2Element {
	from
		image:SVG!Image
	to
		elmt:XML!Element (
			name <- 'image',
			children <- thisModule.Attribute('x', if not image.position.oclIsUndefined() then image.position.x.toString() else '10' endif),
			children <- thisModule.Attribute('y', if not image.position.oclIsUndefined() then image.position.y.toString() else '10' endif),
			children <- thisModule.Attribute('width', if not image.size.oclIsUndefined() then image.size.width.toString() else '200' endif),
			children <- thisModule.Attribute('height', if not image.size.oclIsUndefined() then image.size.height.toString() else '100' endif),
			children <- thisModule.Attribute('xlink:href', if image.referee -> notEmpty() then image.referee -> at(1).name else '' endif)
		)
}	

---@targetPattern SVG!Path
---@targetPattern XML!Element
rule Path2Element {
	from
		path:SVG!Path
	using {
		transforms : Sequence(SVG!Transform) = path.attribute->select(a|a.oclIsKindOf(SVG!Transform));
		transformValue : String = transforms->iterate(transf; str:String=''|str +
			if transf.oclIsTypeOf(SVG!Scale)
				then transf.scale()
				else if transf.oclIsTypeOf(SVG!Translate)
					then transf.translate()
					else if transf.oclIsTypeOf(SVG!Rotate)
						then transf.rotate()
						else ''
					endif
				endif
			endif +
			if transf <> transforms->last()
				then ' '
				else ''
			endif);	
	}
	to
		elmt:XML!Element (
			name <- 'path',
			children <- thisModule.Attribute('transform', if transforms->notEmpty() then transformValue else '' endif),
			children <- thisModule.Attribute('d', path.d),
			children <- thisModule.Attribute('fill', if not path.fill.oclIsUndefined() then path.fill else 'black' endif),
			children <- thisModule.Attribute('stroke', if not path.stroke.oclIsUndefined() then path.stroke else 'none' endif)
		)
}	

---@sourcePattern SVG!Text
---@targetPattern XML!Element
rule Text2Element {
	from
		text:SVG!Text
	using {
		transforms : Sequence(SVG!Transform) = text.attribute->select(a|a.oclIsKindOf(SVG!Transform));
		transformValue : String = transforms->iterate(transf; str:String=''|str +
			if transf.oclIsTypeOf(SVG!Scale)
				then transf.scale()
				else if transf.oclIsTypeOf(SVG!Translate)
					then transf.translate()
					else if transf.oclIsTypeOf(SVG!Rotate)
						then transf.rotate()
						else ''
					endif
				endif
			endif +
			if transf <> transforms->last()
				then ' '
				else ''
			endif);	
	}
	to
		elmt:XML!Element (
			name <- 'text',
			children <- thisModule.Attribute('x', if not text.position.oclIsUndefined() then text.position.x.toString() else '0' endif),
			children <- thisModule.Attribute('y', if not text.position.oclIsUndefined() then text.position.y.toString() else '0' endif),
			children <- thisModule.Attribute('transform', if transforms->notEmpty() then transformValue else '' endif),
			children <-	thisModule.Attribute('fill', if not text.fill.oclIsUndefined() then text.fill else '#ffffff' endif),
			children <- thisModule.Attribute('stroke', if not text.stroke.oclIsUndefined() then text.stroke else 'none' endif),
			children <- thisModule.Attribute('stroke-width', if not text.strokeWidth.oclIsUndefined() then text.strokeWidth else '0' endif),
			children <-	thisModule.Attribute('font-size', if not text.fontSize.oclIsUndefined() then text.fontSize else 'medium' endif),
			--@comments text-anchor value stored in lengthAdjust attribute
			children <- thisModule.Attribute('text-anchor', if not text.lengthAdjust.oclIsUndefined() then text.lengthAdjust else 'start' endif),
			children <- txt,
			children <- text.tspans
		),
		txt:XML!Text (
			value <- text.content
		)
}	

---@sourcePattern SVG!Tspan
---@targetPattern XML!Element
---@targetPattern XML!Text
rule TSpan2Element {
	from
		tspan:SVG!Tspan
	to
		elmt:XML!Element (
			name <- 'tspan',
			children <- thisModule.Attribute('x', if not tspan.position.oclIsUndefined() then tspan.position.x.toString() else '0' endif),
			children <- thisModule.Attribute('y', if not tspan.position.oclIsUndefined() then tspan.position.y.toString() else '0' endif),
			children <- txt
		)
		,
		txt:XML!Text (
			value <- tspan.content
		)
}	

---@sourcePattern String
---@sourcePattern String
---@targetPattern XML!Attribute
lazy rule Attribute {
	from
		attrName:String,
		attrValue:String
	to
		attr:XML!Attribute (
			name <- attrName,
			value <- attrValue
		)
}	